{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Timer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","date","Date","interval_id","nextProps","flag","CountStart","CountStop","_this2","setInterval","setState","console","log","toString","clearInterval","react_default","a","createElement","Component","Button1","onClick","onClickEvent","label","App","_this3","timer_flag","alert","className","App_Timer","App_Button1","timerStart","bind","timerStop","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6KCOlCC,2BACJ,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAGDQ,MAAQ,CACXC,KAAO,IAAIC,MAGbT,EAAKU,YAAc,KARHV,qIAiBSW,GACrBA,EAAUC,KACZT,KAAKU,aAENV,KAAKW,iGASI,IAAAC,EAAAZ,KAIVA,KAAKO,YAAcM,YAAY,WAE7BD,EAAKE,SAAS,CAAET,KAAM,IAAIC,MAAU,WACrCS,QAAQC,IAAIJ,EAAKR,MAAMC,KAAKY,WAAa,uDAExC,yCAMFC,cAAelB,KAAKO,8CAKpB,OACEY,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,oEACErB,KAAKI,MAAMC,KAAKY,mBAtDNK,cA6DdC,mLAEF,OACEJ,EAAAC,EAAAC,cAAA,UAAQG,QAAUxB,KAAKJ,MAAM6B,cAA7B,IACIzB,KAAKJ,MAAM8B,cAJCJ,aA4CPK,cAhCb,SAAAA,EAAY/B,GAAM,IAAAgC,EAAA,OAAA9B,OAAAC,EAAA,EAAAD,CAAAE,KAAA2B,IAChBC,EAAA9B,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA6B,GAAAxB,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXyB,YAAa,GAJCD,4EAUhBE,MAAM,qDACN9B,KAAKc,SAAS,CAAEe,YAAa,wCAK7BC,MAAM,qDACN9B,KAAKc,SAAS,CAAEe,YAAa,qCAI7B,OACEV,EAAAC,EAAAC,cAAA,OAAKU,UAAU,OACZ,4DAAiB/B,KAAKI,MAAMyB,WAC7BV,EAAAC,EAAAC,cAACW,EAAD,CAAOvB,KAAMT,KAAKI,MAAMyB,aACxBV,EAAAC,EAAAC,cAACY,EAAD,CAASP,MAAM,2BAAOD,aAAczB,KAAKkC,WAAWC,KAAKnC,QACzDmB,EAAAC,EAAAC,cAACY,EAAD,CAASP,MAAM,2BAAOD,aAAczB,KAAKoC,UAAUD,KAAKnC,gBA5B9CsB,aClEEe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.119e2aae.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// App.js \n\nimport React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n// 現在の時間を表示するコンポーネント\nclass Timer extends Component{\n  constructor(props){\n    super(props);\n\n    // State(状態)　\n    this.state = {\n      date : new Date()\n    }\n    \n    this.interval_id = null; // setIntervalが、返すIDを格納する        \n  }\n  \n  // コンポーネント render 関数が、初めて実行された時に実行される \n  // 描画された後に実行される\n  componentDidMont(){    \n  }\n  \n  // 親のコンポーネントが setState されると実行される　\n  componentWillReceiveProps( nextProps ){\n    if( nextProps.flag ){\n      this.CountStart(); //タイマーのカウントをスタートさせる\n    }else{\n    \tthis.CountStop(); //タイマーのカウントをストップする \n    }\n  }\n\n  // コンポーネントが消える時に実行される ( 描画されなくなる時 )\n  componentWillUmMount(){    \n  }\n  \n  // カウントをスタートさせる関数\n  CountStart(){\n    // 1秒に一回第一引数の関数を実行する\n    // 1000 で、　1秒\n    // 10000 で、10秒\n    this.interval_id = setInterval(()=>{\n      //this.state.date の値を更新する\n      this.setState({ date: new Date() }, ()=>{\n\t\t\t\t\tconsole.log(this.state.date.toString() + \"描画されました。\" );\n      });      \n    },1000);    \n  }\n\n  // カウントをストップする関数\n  CountStop(){\n    // setInterval の処理を止める\n    clearInterval( this.interval_id );\n  }\n  \n  // setState を実行するたびに実行される\n  render(){    \n    return(\n      <div>\n      \t\t<h1>React タイマーサンプル</h1> \n        { this.state.date.toString() }\n      </div>\n    );\n  }\n}\n\n// ボタンを表示するコンポーネント\nclass Button1 extends Component{\n  render(){\n    return (\n      <button onClick={ this.props.onClickEvent }> {/* this.props. onClickEvent は関数。ボタンがクリックされたら実行される */}\n        { this.props.label /* <Button1 label=\"hoge\" /> ←の場合 \"hoge\" が this.props.label に入る */}     \n      </button>\n    );\n  }\n}\n\nclass App extends Component {\n  \n  constructor(props){\n    super(props);\n    \n    this.state = {\n      timer_flag : false, // timerの更新フラグ\n    }\n  }\n\n  // タイマーのカウントをスタートさせる関数\n  timerStart(){\n    alert(\"タイマースタート!\");\n    this.setState({ timer_flag : true });\n  }\n  \n  // タイマーのカウントをストップする関数\n  timerStop(){\n    alert(\"タイマーストップ!\");\n    this.setState({ timer_flag : false });\n  }\n  \n  render() {\n    return (\n      <div className=\"App\">\n        {\"タイマーフラグの値 : \" + this.state.timer_flag }\n        <Timer flag={this.state.timer_flag} />\n        <Button1 label=\"スタート\" onClickEvent={this.timerStart.bind(this)} />\n        <Button1 label=\"ストップ\" onClickEvent={this.timerStop.bind(this)} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}